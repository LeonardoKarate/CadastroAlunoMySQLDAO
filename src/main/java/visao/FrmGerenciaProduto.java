package visao;

import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Produto;
import modelo.Categoria;
import dao.ProdutoDAO;
import dao.CategoriaDAO;


public class FrmGerenciaProduto extends javax.swing.JFrame {
    
    private ProdutoDAO produtoDAO;
    private CategoriaDAO categoriaDAO;
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(FrmGerenciaProduto.class.getName());

    public FrmGerenciaProduto() {
        initComponents();
        initializeDAOs();
        carregarCategorias();
        carregarTabela();
    }
    
    private void carregarCategorias() {
        List<Categoria> categorias = new ArrayList<>();
        try {
            categorias = categoriaDAO.getMinhaLista();
        } catch (Exception e) {
            logger.warning("DAO failure, using fallback: " + e.getMessage());
        }

        // TODO: Para testear
        if (categorias.isEmpty()) {
            categorias.add(new Categoria(1, "Limpeza", "Médio", "Plástico"));
            categorias.add(new Categoria(2, "Enlatados", "Grande", "Lata"));
            categorias.add(new Categoria(3, "Vegetais", "Pequeno", "Vidro"));
        }

        cbCategoria.removeAllItems();
        for (Categoria c : categorias) {
            cbCategoria.addItem(c.getNome());
        }
    }

    
    private void initializeDAOs() {
        try {
            produtoDAO = new ProdutoDAO();
            categoriaDAO = new CategoriaDAO();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao inicializar DAOs: " + e.getMessage());
            logger.severe("DAO Initialization error: " + e.getMessage());
            produtoDAO = null;
            categoriaDAO = null;
        }
    }
    
    private void carregarTabela() {
        if (produtoDAO == null || tabelaProdutos == null) return;

        DefaultTableModel modelo = (DefaultTableModel) tabelaProdutos.getModel();
        modelo.setRowCount(0);
        List<Produto> produtos = new ArrayList<>();
        try {
            produtos = produtoDAO.getMinhaLista();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar produtos: " + e.getMessage());
            logger.warning("Produto load error: " + e.getMessage());
        }
        
        // TODO: para testear
        if (produtos.isEmpty()) {
            Categoria mockCategoria = new Categoria(99, "MockCategoria", "Médio", "Cartão");
            produtos.add(new Produto(999, "ProdutoTeste1", 10.50, "un", 50, 5, 100, mockCategoria));
            produtos.add(new Produto(1000, "ProdutoTeste2", 7.80, "kg", 30, 10, 90, mockCategoria));
        }

        for (Produto p : produtos) {
            modelo.addRow(new Object[]{
                p.getId(),
                p.getNome(),
                p.getPreco(),
                p.getUnidade(),
                p.getQuantidade(),
                p.getQuantidadeMinima(),
                p.getQuantidadeMaxima(),
                (p.getCategoria() != null) ? p.getCategoria().getNome() : "N/A"
            });
        }
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPreco = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUnidade = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtQuantidade = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtQtdMinima = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtQtdMaxima = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbCategoria = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProdutos = new javax.swing.JTable();
        JBCadastrar = new javax.swing.JButton();
        JBExcluir = new javax.swing.JButton();
        JBAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nome:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        jLabel2.setText("Preço:");

        txtPreco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecoActionPerformed(evt);
            }
        });

        jLabel3.setText("Unidade:");

        txtUnidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnidadeActionPerformed(evt);
            }
        });

        jLabel4.setText("Quantidade:");

        jLabel5.setText("Qtd. Mínima:");

        jLabel6.setText("Qtd. Máxima:");

        txtQtdMaxima.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQtdMaximaActionPerformed(evt);
            }
        });

        jLabel7.setText("Categoria:");

        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tabelaProdutos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Preço", "Unidade", "Quantidade", "Qtd Min", " Qtd Max", "Categoria"
            }
        ));
        tabelaProdutos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaProdutosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaProdutos);

        JBCadastrar.setText("Cadastrar");
        JBCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBCadastrarActionPerformed(evt);
            }
        });

        JBExcluir.setText("Excluir");
        JBExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBExcluirActionPerformed(evt);
            }
        });

        JBAtualizar.setText("Atualizar");
        JBAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtNome, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel7))
                                    .addGap(47, 47, 47)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtQuantidade)
                                        .addComponent(txtUnidade)
                                        .addComponent(txtPreco)
                                        .addComponent(cbCategoria, 0, 115, Short.MAX_VALUE)
                                        .addComponent(txtQtdMaxima)
                                        .addComponent(txtQtdMinima))))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBExcluir)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(JBAtualizar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(JBCadastrar))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPreco, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtQtdMinima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtQtdMaxima, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtUnidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JBCadastrar)
                        .addComponent(JBAtualizar)
                        .addComponent(JBExcluir)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>                        

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       

    private void txtPrecoActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void txtUnidadeActionPerformed(java.awt.event.ActionEvent evt) {                                           
        // TODO add your handling code here:
    }                                          

    private void txtQtdMaximaActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void JBCadastrarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        try {
            String nome = txtNome.getText();
            double preco = Double.parseDouble(txtPreco.getText());
            String unidade = txtUnidade.getText();
            int quantidade = Integer.parseInt(txtQuantidade.getText());
            int qtdMin = Integer.parseInt(txtQtdMinima.getText());
            int qtdMax = Integer.parseInt(txtQtdMaxima.getText());
            String nomeCategoria = (String) cbCategoria.getSelectedItem();

            Categoria categoria = categoriaDAO.getMinhaLista().stream()
                .filter(c -> c.getNome().equals(nomeCategoria))
                .findFirst()
                .orElse(null);

            if (categoria == null) {
                JOptionPane.showMessageDialog(this, "Categoria inválida.");
                return;
            }

            Produto novo = new Produto(0, nome, preco, unidade, quantidade, qtdMin, qtdMax, categoria);
            novo.inserProdutoBD(nome, preco, unidade, quantidade, qtdMin, qtdMax, categoria);
            carregarTabela();
            JOptionPane.showMessageDialog(this, "Produto cadastrado.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao cadastrar: " + e.getMessage());
            logger.severe("Erro no cadastro: " + e.getMessage());
        }
    }                                           

    private void JBExcluirActionPerformed(java.awt.event.ActionEvent evt) {                                          
        int row = tabelaProdutos.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um produto para excluir.");
            return;
        }

        int produtoId = (int) tabelaProdutos.getValueAt(row, 0);
        try {
            Produto temp = new Produto();
            temp.deleteProdutoBD(produtoId);
            carregarTabela();
            JOptionPane.showMessageDialog(this, "Produto excluído.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao excluir: " + e.getMessage());
            logger.severe("Erro na exclusão: " + e.getMessage());
        }
    }                                         

    private void JBAtualizarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int row = tabelaProdutos.getSelectedRow();
        produtoDAO = new ProdutoDAO();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um produto para atualizar.");
            return;
        }

        try {
            int id = (int) tabelaProdutos.getValueAt(row, 0);
            String nome = txtNome.getText();
            double preco = Double.parseDouble(txtPreco.getText());
            String unidade = txtUnidade.getText();
            int quantidade = Integer.parseInt(txtQuantidade.getText());
            int qtdMin = Integer.parseInt(txtQtdMinima.getText());
            int qtdMax = Integer.parseInt(txtQtdMaxima.getText());
            String nomeCategoria = (String) cbCategoria.getSelectedItem();

            Categoria categoria = categoriaDAO.getMinhaLista().stream()
                .filter(c -> c.getNome().equals(nomeCategoria))
                .findFirst()
                .orElse(null);

            if (categoria == null) {
                JOptionPane.showMessageDialog(this, "Categoria inválida.");
                return;
            }

            Produto p = new Produto(id, nome, preco, unidade, quantidade, qtdMin, qtdMax, categoria);
            // TODO:
             produtoDAO.updateProdutoBD(p);

            carregarTabela();
            JOptionPane.showMessageDialog(this, "Produto atualizado.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao atualizar: " + e.getMessage());
            logger.severe("Erro na atualização: " + e.getMessage());
        }
    }                                           

    private void tabelaProdutosMouseClicked(java.awt.event.MouseEvent evt) {                                            
        int row = tabelaProdutos.getSelectedRow();
        if (row == -1) return;

        txtNome.setText(tabelaProdutos.getValueAt(row, 1).toString());
        txtPreco.setText(tabelaProdutos.getValueAt(row, 2).toString());
        txtUnidade.setText(tabelaProdutos.getValueAt(row, 3).toString());
        txtQuantidade.setText(tabelaProdutos.getValueAt(row, 4).toString());
        txtQtdMinima.setText(tabelaProdutos.getValueAt(row, 5).toString());
        txtQtdMaxima.setText(tabelaProdutos.getValueAt(row, 6).toString());
        cbCategoria.setSelectedItem(tabelaProdutos.getValueAt(row, 7).toString());
    }                                           

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new FrmGerenciaProduto().setVisible(true));
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton JBAtualizar;
    private javax.swing.JButton JBCadastrar;
    private javax.swing.JButton JBExcluir;
    private javax.swing.JComboBox<String> cbCategoria;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaProdutos;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtPreco;
    private javax.swing.JTextField txtQtdMaxima;
    private javax.swing.JTextField txtQtdMinima;
    private javax.swing.JTextField txtQuantidade;
    private javax.swing.JTextField txtUnidade;
    // End of variables declaration                   
}
